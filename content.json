[{"title":"CSS字体的导入","date":"2017-02-07T07:10:57.000Z","path":"2017/02/07/css字体导入/","text":"语法如下： @font-face { font-family: Myfontname; src: XXX; (.ttf;.eot) } p { font-family: Myfontname; } 例子： &lt;!DOCTYPE html&gt; &lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style&gt; @font-face { font-family: &quot;ChinaStyle&quot;; src: url(ChinaStyle.ttf); } h1 { font-family: &quot;ChinaStyle&quot;; font-size: 4em; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;中国龙&lt;/h1&gt; &lt;/body&gt; &lt;/html&gt; 注意一下，字体的后缀很重要，事关能不能再浏览器中正常显示 @font-face { font-family: &apos;icon-font&apos;; src:url(&apos;/assets/fonts/jiaicon.eot&apos;); src:url(&apos;/assets/fonts/jiaicon.eot&apos;) format(&apos;embedded-opentype&apos;), url(&apos;/assets/fonts/jiaicon.woff&apos;) format(&apos;woff&apos;), url(&apos;/assets/fonts/jiaicon.ttf&apos;) format(&apos;truetype&apos;), url(&apos;/assets/fonts/jiaicon.svg&apos;) format(&apos;svg&apos;); font-weight: normal; font-style: normal; } 除了格式外，好像还有其他因素会影响到字体的显示。比如说如果继续设置其他字体会导致显示无效。另外还有一个限制，那就是，中文导入字体不像英文字体，文件往往有几M，比较大。","tags":[{"name":"CSS","slug":"CSS","permalink":"http://HeliumLau.github.io/tags/CSS/"}]},{"title":"基于github搭建hexo博客","date":"2017-02-06T13:36:25.000Z","path":"2017/02/06/基于github搭建hexo博客/","text":"准备工作1.安装Git2.安装Node.js3.有一个GitHub账号 搭建流程1.登录github网站，在github建立一个repository，名字必须为XXX.github.io，其中XXX是你的github账户名，例如：HeliumLau.github.io。 2.打开Command命令窗口，下载一个淘宝NPM镜像npm install -g cnpm --registry=https://registry.npm.taobao.org，用cnpm安装hexo框架cnpm install -g hexo-cli以及cnpm install hexo --save，可通过命令hexo -v查看版本以及是否安装成功。3.本地创建一个blog文件夹，任意路径。4.同样通过Command命令窗口，在对应blog文件夹路径下初始化hexo项目hexo init。创建完成后，cd到该目录下安装生成器cnpm install。5.要在本地建立博客就输入hexo s -g，再打开浏览器输入localhost：4000即可。但是，我们想要的是上线，可以在其他地方阅读该博客。6.为了支持github，还需要安装另外一个插件npm install hexo-deployer-git --save。7.我们需要配置项目目录下的_config.yml文件，打开它找到最后一行，我们把github的配置信息填上去。 1234deploy: type: git repo: https://github.com/HeliumLau/HeliumLau.github.io.git branch: master 8.当前路径输入命令行hexo d，按照指示输入账号密码即可登录，注意：密码输入并不会显示。这样一个博客就搭建完成啦！ 管理博客写文章输入创建文章命令，生成一个md文件(/blog/source/_posts/) 1$ hexo new &quot;hello&quot; 用编辑器打开hello.md文件编辑并保存。发布并更新博客hexo d -g。 删除文章把 /source/_posts 下的 Test01.md和public文件夹里的文章都删除，再删除db.json，输入命令行hexo clean,再生成hexo d -g。 更换主题可以从github或者其他地方找到优秀的主题，下载压缩包并解压到该blog的themes文件夹下，对站点配置文件以及主题配置文件进行配置。==结束后，一定要hexo clean清楚hexo缓存，要不上传看不到更新的效果。==","tags":[{"name":"搭建个人博客","slug":"搭建个人博客","permalink":"http://HeliumLau.github.io/tags/搭建个人博客/"}]},{"title":"Flex Layout(转载自阮一峰的博客)","date":"2017-02-06T07:10:57.000Z","path":"2017/02/06/fortest/","text":"一、骰子的布局骰子的一面，最多可以放置9个点。下面，就来看看Flex如何实现，从1个点到9个点的布局。你可以到codepen查看Demo。如果不加说明，本节的HTML模板一律如下。 &lt;div class=&quot;box&quot;&gt; &lt;span class=&quot;item&quot;&gt;&lt;/span&gt; &lt;/div&gt; 上面代码中，div元素（代表骰子的一个面）是Flex容器，span元素（代表一个点）是Flex项目。如果有多个项目，就要添加多个span元素，以此类推。 1.1 单项目首先，只有左上角1个点的情况。Flex布局默认就是首行左对齐，所以一行代码就够了。 .box { display: flex; } 设置项目的对齐方式，就能实现居中对齐和右对齐。 .box { display: flex; justify-content: center; } .box { display: flex; justify-content: flex-end; } .box { display: flex; align-items: center; } .box { display: flex; justify-content: center; align-items: flex-end; } .box { display: flex; justify-content: flex-end; align-items: flex-end; } 1.2 双项目 .box { display: flex; justify-content: space-between; } .box { display: flex; flex-direction: column; justify-content: space-between; } .box { display: flex; flex-direction: column; justify-content: space-between; align-items: center; } .box { display: flex; flex-direction: column; justify-content: space-between; align-items: flex-end; } .box { display: flex; } .item:nth-child(2) { align-self: center; } .box { display: flex; justify-content: space-between; } .item:nth-child(2) { align-self: flex-end; } 1.3 三项目 .box { display: flex; } .item:nth-child(2) { align-self: center; } .item:nth-child(3) { align-self: flex-end; } 1.4 四项目 .box { display: flex; flex-wrap: wrap; justify-content: flex-end; align-content: space-between; } HTML代码如下。 &lt;div class=&quot;box&quot;&gt; &lt;div class=&quot;column&quot;&gt; &lt;span class=&quot;item&quot;&gt;&lt;/span&gt; &lt;span class=&quot;item&quot;&gt;&lt;/span&gt; &lt;/div&gt; &lt;div class=&quot;column&quot;&gt; &lt;span class=&quot;item&quot;&gt;&lt;/span&gt; &lt;span class=&quot;item&quot;&gt;&lt;/span&gt; &lt;/div&gt; &lt;/div&gt; CSS代码如下。 .box { display: flex; flex-wrap: wrap; align-content: space-between; } .column { flex-basis: 100%; display: flex; justify-content: space-between; } 1.5 六项目 .box { display: flex; flex-wrap: wrap; align-content: space-between; } .box { display: flex; flex-direction: column; flex-wrap: wrap; align-content: space-between; } HTML代码如下。 &lt;div class=&quot;box&quot;&gt; &lt;div class=&quot;row&quot;&gt; &lt;span class=&quot;item&quot;&gt;&lt;/span&gt; &lt;span class=&quot;item&quot;&gt;&lt;/span&gt; &lt;span class=&quot;item&quot;&gt;&lt;/span&gt; &lt;/div&gt; &lt;div class=&quot;row&quot;&gt; &lt;span class=&quot;item&quot;&gt;&lt;/span&gt; &lt;/div&gt; &lt;div class=&quot;row&quot;&gt; &lt;span class=&quot;item&quot;&gt;&lt;/span&gt; &lt;span class=&quot;item&quot;&gt;&lt;/span&gt; &lt;/div&gt; &lt;/div&gt; CSS代码如下。 .box { display: flex; flex-wrap: wrap; } .row{ flex-basis: 100%; display:flex; } .row:nth-child(2){ justify-content: center; } .row:nth-child(3){ justify-content: space-between; } 1.6 九项目 二、网格布局2.1 基本网格布局最简单的网格布局，就是平均分布。在容器里面平均分配空间，跟上面的骰子布局很像，但是需要设置项目的自动缩放。HTML代码如下。 &lt;div class=&quot;Grid&quot;&gt; &lt;div class=&quot;Grid-cell&quot;&gt;...&lt;/div&gt; &lt;div class=&quot;Grid-cell&quot;&gt;...&lt;/div&gt; &lt;div class=&quot;Grid-cell&quot;&gt;...&lt;/div&gt; &lt;/div&gt; CSS代码如下。 .Grid { display: flex; } .Grid-cell { flex: 1; } 2.2 百分比布局某个网格的宽度为固定的百分比，其余网格平均分配剩余的空间。HTML代码如下。 &lt;div class=&quot;Grid&quot;&gt; &lt;div class=&quot;Grid-cell u-1of4&quot;&gt;...&lt;/div&gt; &lt;div class=&quot;Grid-cell&quot;&gt;...&lt;/div&gt; &lt;div class=&quot;Grid-cell u-1of3&quot;&gt;...&lt;/div&gt; &lt;/div&gt; .Grid { display: flex; } .Grid-cell { flex: 1; } .Grid-cell.u-full { flex: 0 0 100%; } .Grid-cell.u-1of2 { flex: 0 0 50%; } .Grid-cell.u-1of3 { flex: 0 0 33.3333%; } .Grid-cell.u-1of4 { flex: 0 0 25%; } 三、圣杯布局圣杯布局（Holy Grail Layout）指的是一种最常见的网站布局。页面从上到下，分成三个部分：头部（header），躯干（body），尾部（footer）。其中躯干又水平分成三栏，从左到右为：导航、主栏、副栏。HTML代码如下。 &lt;body class=&quot;HolyGrail&quot;&gt; &lt;header&gt;...&lt;/header&gt; &lt;div class=&quot;HolyGrail-body&quot;&gt; &lt;main class=&quot;HolyGrail-content&quot;&gt;...&lt;/main&gt; &lt;nav class=&quot;HolyGrail-nav&quot;&gt;...&lt;/nav&gt; &lt;aside class=&quot;HolyGrail-ads&quot;&gt;...&lt;/aside&gt; &lt;/div&gt; &lt;footer&gt;...&lt;/footer&gt; &lt;/body&gt; CSS代码如下。 .HolyGrail { display: flex; min-height: 100vh; flex-direction: column; } header, footer { flex: 1; } .HolyGrail-body { display: flex; flex: 1; } .HolyGrail-content { flex: 1; } .HolyGrail-nav, .HolyGrail-ads { /* 两个边栏的宽度设为12em */ flex: 0 0 12em; } .HolyGrail-nav { /* 导航放到最左边 */ order: -1; } 如果是小屏幕，躯干的三栏自动变为垂直叠加。 @media (max-width: 768px) { .HolyGrail-body { flex-direction: column; flex: 1; } .HolyGrail-nav, .HolyGrail-ads, .HolyGrail-content { flex: auto; } } 四、输入框的布局我们常常需要在输入框的前方添加提示，后方添加按钮。HTML代码如下。 &lt;div class=&quot;InputAddOn&quot;&gt; &lt;span class=&quot;InputAddOn-item&quot;&gt;...&lt;/span&gt; &lt;input class=&quot;InputAddOn-field&quot;&gt; &lt;button class=&quot;InputAddOn-item&quot;&gt;...&lt;/button&gt; &lt;/div&gt; CSS代码如下。 .InputAddOn { display: flex; } .InputAddOn-field { flex: 1; } 五、悬挂式布局有时，主栏的左侧或右侧，需要添加一个图片栏。HTML代码如下。 &lt;div class=&quot;Media&quot;&gt; &lt;img class=&quot;Media-figure&quot; src=&quot;&quot; alt=&quot;&quot;&gt; &lt;p class=&quot;Media-body&quot;&gt;...&lt;/p&gt; &lt;/div&gt; CSS代码如下。 .Media { display: flex; align-items: flex-start; } .Media-figure { margin-right: 1em; } .Media-body { flex: 1; }","tags":[{"name":"CSS布局","slug":"CSS布局","permalink":"http://HeliumLau.github.io/tags/CSS布局/"}]},{"title":"Hello World","date":"2017-02-06T06:26:35.163Z","path":"2017/02/06/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[]}]